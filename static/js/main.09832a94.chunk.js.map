{"version":3,"sources":["Components/FullCalendar/index.js","App.js","serviceWorker.js","index.js"],"names":["FullCalendarEvents","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","events","title","start","end","color","id","url","push","setState","react_default","a","createElement","className","lib_default","header","left","center","right","titleFormat","defaultDate","moment","navLinks","editable","eventLimit","React","Component","App","Container","Row","Col","md","span","offset","FullCalendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQA+FeA,iCAtFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACbC,OAAO,CACL,CACIC,MAAO,gBACPC,MAAO,aACPC,IAAK,aACLC,MAAO,WAEX,CACIH,MAAO,aACPC,MAAO,aACPC,IAAK,aACLC,MAAO,WAEX,CACIC,GAAI,IACJJ,MAAO,kBACPC,MAAO,aACPC,IAAK,aACLC,MAAO,WAEX,CACIC,GAAI,IACJJ,MAAO,kBACPC,MAAO,sBACPE,MAAO,WAEX,CACIH,MAAO,aACPC,MAAO,aACPC,IAAK,aACLC,MAAO,WAEX,CACIH,MAAO,UACPC,MAAO,sBACPC,IAAK,sBACLC,MAAO,WAEX,CACIH,MAAO,iBACPC,MAAO,sBACPE,MAAO,WAEX,CACIH,MAAO,mBACPK,IAAK,qBACLJ,MAAO,aACPE,MAAO,aAlDIZ,qEAwDd,IACEQ,EAAUL,KAAKI,MAAfC,OAELA,EAAOO,KADI,CAACN,MAAO,aAAcC,MAAO,aAAcE,MAAO,WAE7DT,KAAKa,SAAS,CAACR,4CAIf,OACES,EAAAC,EAAAC,cAAA,OAAKN,GAAG,oBAAoBO,UAAU,UACpCH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAlB,aACAH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEL,GAAK,iBACLS,OAAU,CACRC,KAAM,wBACNC,OAAQ,kBACRC,MAAO,IAETC,YAAa,WACbC,YAAaC,MACbC,UAAW,EACXC,UAAW,EACXC,YAAa,EACbvB,OAAUL,KAAKI,MAAMC,iBAhFEwB,IAAMC,oCCUxBC,mLAZX,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACClB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAM,GAAIC,OAAQ,IAC1BvB,EAAAC,EAAAC,cAACsB,EAAD,gBANQR,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.09832a94.chunk.js","sourcesContent":["import React from 'react';\n \nimport moment from 'moment'\nimport FullCalendar from 'fullcalendar-reactwrapper-with-scheduler';\nimport \"fullcalendar/dist/fullcalendar.min.css\"\nimport \"fullcalendar-scheduler/dist/scheduler.min.css\"\nimport './style.css'\n \nclass FullCalendarEvents extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    events:[\n      {\n          title: 'All Day Event',\n          start: '2019-03-01',\n          end: '2019-03-04',\n          color: '#ace69d'\n      },\n      {\n          title: 'Long Event',\n          start: '2019-03-01',\n          end: '2019-03-04',\n          color: '#e29fa8'\n      },\n      {\n          id: 999,\n          title: 'Repeating Event',\n          start: '2019-03-03',\n          end: '2019-03-04',\n          color: '#8aa0f2'\n      },\n      {\n          id: 999,\n          title: 'Repeating Event',\n          start: '2017-05-16T16:00:00',\n          color: '#ace69d'\n      },\n      {\n          title: 'Conference',\n          start: '2017-05-11',\n          end: '2017-05-13',\n          color: '#8aa0f2'\n      },\n      {\n          title: 'Meeting',\n          start: '2017-05-12T10:30:00',\n          end: '2017-05-12T12:30:00',\n          color: '#8aa0f2'\n      },\n      {\n          title: 'Birthday Party',\n          start: '2017-05-13T07:00:00',\n          color: '#8aa0f2'\n      },\n      {\n          title: 'Click for Google',\n          url: 'http://google.com/',\n          start: '2017-05-28',\n          color: '#8aa0f2'\n      }\n      ],    \n    }\n  }\n\n  add(){\n    let {events} = this.state;\n    let data = {title: 'test event', start: '2019-03-05', color: 'orange'}\n    events.push(data)\n    this.setState({events})\n  }\n \n  render() {\n    return (\n      <div id=\"example-component\" className=\"calCon\">\n        <button className=\"btn add-event\">Add event</button>\n        <FullCalendar\n          id = \"your-custom-ID\"\n          header = {{\n            left: 'month,basicWeek today',\n            center: 'prev title next',\n            right: ''\n          }}\n          titleFormat={'MMM YYYY'}\n          defaultDate={moment()}\n          navLinks= {true}\n          editable= {true}\n          eventLimit= {true}\n          events = {this.state.events}\n        />\n      </div>\n    );\n  }\n}\n\nexport default FullCalendarEvents;","import React, { Component } from 'react';\nimport FullCalendarEvents from './Components/FullCalendar/';\nimport {Container, Row, Col} from 'react-bootstrap'\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n      \t<Row>\n      \t\t<Col md={{span: 10, offset: 1}}>\n        \t\t<FullCalendarEvents />\n        \t</Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}